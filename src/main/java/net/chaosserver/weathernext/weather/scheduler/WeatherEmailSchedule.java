/*
 * Copyright (c) 2013 Jordan Reed 
 * 
 * This file is part of Weather.Next.
 * 
 * Weather.Next is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Weather.Next is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Weather.Next.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.chaosserver.weathernext.weather.scheduler;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;

/**
 * POJO to describe a schedule of emails to send.
 * 
 * @author jreed
 * 
 */
public class WeatherEmailSchedule implements Serializable {
    /** Autogenerated. */
    private static final long serialVersionUID = -5592258067467204179L;

    /**
     * Used to format the string in the toMap function for debug purposes.
     */
    protected SimpleDateFormat sdf = new SimpleDateFormat(
            "yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

    /** Owner id. **/
    protected String ownerId;

    /** Recipient name. **/
    protected String recipientName;

    /** Recipient email. **/
    protected String recipientEmail;

    /** Weather Zipcode. **/
    protected String zipcode;

    /** Timezone. **/
    protected TimeZone timezone;

    /** Last-sent. **/
    protected Date nextSend;

    /** Key. **/
    protected long key;

    /**
     * Constructor to make a schedule object.
     * 
     * @param ownerId the unique id for the owner of the object
     * @param recipientName the friendly name of the person receiving the
     *            message
     * @param recipientEmail the email address to send the weather email to
     * @param zipcode the zipcode of the schedule
     * @param timezone the timezone of the schedule
     * @param nextSend the next date to send the message on
     */
    public WeatherEmailSchedule(String ownerId, String recipientName,
            String recipientEmail, String zipcode, TimeZone timezone,
            Date nextSend) {

        this.ownerId = ownerId;
        this.recipientName = recipientName;
        this.recipientEmail = recipientEmail;
        this.zipcode = zipcode;
        this.timezone = timezone != null ? (TimeZone) timezone.clone() : null;
        this.nextSend = nextSend != null ? (Date) nextSend.clone() : null;
    }

    /**
     * Constructor to make a schedule object.
     * 
     * @param ownerId the unique id for the owner of the object
     * @param recipientName the friendly name of the person receiving the
     *            message
     * @param recipientEmail the email address to send the weather email to
     * @param zipcode the zipcode of the schedule
     * @param timezone the timezone of the schedule
     * @param nextSend the next date to send the message on
     * @param key a unique schedule key
     */
    public WeatherEmailSchedule(String ownerId, String recipientName,
            String recipientEmail, String zipcode, TimeZone timezone,
            Date nextSend, long key) {

        this(ownerId, recipientName, recipientEmail, zipcode, timezone,
                nextSend);
        this.key = key;
    }

    /**
     * the unique id for the owner of the object.
     * 
     * @return the unique id for the owner of the object
     */
    public String getOwnerId() {
        return this.ownerId;
    }

    /**
     * the friendly name of the person receiving the message.
     * 
     * @return the friendly name of the person receiving the message
     */
    public String getRecipientName() {
        return this.recipientName;
    }

    /**
     * the email address to send the weather email to.
     * 
     * @return the email address to send the weather email to
     */
    public String getRecipientEmail() {
        return this.recipientEmail;
    }

    /**
     * the zipcode of the schedule.
     * 
     * @return the zipcode of the schedule
     */
    public String getZipcode() {
        return this.zipcode;
    }

    /**
     * the timezone of the schedule.
     * 
     * @return the timezone of the schedule
     */
    public TimeZone getTimezone() {
        return this.timezone;
    }

    /**
     * the next date to send the message on.
     * 
     * @return the next date to send the message on
     */
    public Date getNextSend() {
        return this.nextSend != null ? (Date) this.nextSend.clone() : null;
    }

    /**
     * Sets the unique identification key.
     * 
     * @param key the unique identification key
     */
    public void setKey(long key) {
        this.key = key;
    }

    /**
     * the unique identification key.
     * 
     * @return the unique identification key
     */
    public long getKey() {
        return this.key;
    }

    /**
     * Updates the nextSendDate to be 1-day in the future.
     * 
     * @return the updated value of nextSendDate
     */
    public Date sendNow() {
        Calendar today = Calendar.getInstance(this.timezone);
        Calendar newLastSent = Calendar.getInstance(this.timezone);
        newLastSent.setTime(this.nextSend);

        newLastSent.set(today.get(Calendar.YEAR), today.get(Calendar.MONTH),
                today.get(Calendar.DAY_OF_MONTH));
        newLastSent.add(Calendar.DAY_OF_MONTH, 1);

        this.nextSend = newLastSent.getTime();

        return (Date) this.nextSend.clone();
    }

    /**
     * Converts the object in a Map of String:String which is useful for
     * formatting into JSON.
     * 
     * @return the object as a map of string-to-string.
     */
    public Map<String, String> toMap() {
        Map<String, String> map = new HashMap<String, String>();
        map.put("ownerId", getOwnerId());
        map.put("recipientName", getRecipientName());
        map.put("recipientEmail", getRecipientEmail());
        map.put("zipcode", getZipcode());
        map.put("timezone", timezone.getID());
        if (nextSend != null) {
            map.put("nextSend", String.valueOf(nextSend.getTime()));
            map.put("nextSendFormatted", sdf.format(nextSend.getTime()));
        } else {
            map.put("nextSend", "");
            map.put("nextSendFormatted", "");
        }
        map.put("key", String.valueOf(key));

        return map;
    }
}
